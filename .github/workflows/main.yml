name: CI Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc libimobiledevice-dev libusb-1.0-0-dev libssl-dev

    - name: Build project
      run: make

    - name: Run tests
      run: |
        if [ -f build/Achilles ]; then
          echo "Build successful, Achilles binary created"
          ./build/Achilles --version || echo "Version check skipped (optional)"
        else
          echo "Build failed: Achilles binary not found"
          exit 1
        fi

    - name: Install project
      run: sudo make install

    - name: Upload Achilles artifact
      uses: actions/upload-artifact@v4
      with:
        name: Achilles-binary
        path: build/Achilles
        if-no-files-found: error

    - name: Check file existence before release
      if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
      run: |
        if [ -f build/Achilles ]; then
          echo "Achilles binary found, proceeding to release"
        else
          echo "Error: Achilles binary not found in build directory"
          ls -la build/
          exit 1
        fi

    - name: Create Release
      if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_tag || github.ref_name }}
        name: Release ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.release_tag || github.ref_name }}
        draft: false
        prerelease: false
        files: build/Achilles
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
